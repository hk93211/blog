(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{89:function(e,t,a){"use strict";a.r(t);var r=a(0),s=function(e){var t,a,r,s,v=(r="post",s="名词解释",(t={}).internal=a=void 0,t.contentType="markdown",t.slug="20180911-redux-saga",t.content=a,t.title="redux-saga",t.layout=r,t.markdownHeadings=[{text:"概述",slug:"概述",level:2},{text:s,slug:s,level:2},{text:"Effect",slug:"effect",level:3},{text:"Task",slug:"task",level:3},{text:"阻塞调用 和 非阻塞调用",slug:"阻塞调用-和-非阻塞调用",level:3},{text:"watcher 和 worker",slug:"watcher-和-worker",level:3},{text:"api",slug:"api",level:3}],t.excerpt="<p>redux-saga是一个用于管理redux应用异步操作的中间件，redux-saga通过创建sagas将所有异步操作逻辑收集在一个地方集中处理，可以用来代替redux-thunk中间件</p>\n",t.createdAt=new Date(1536624e6),t.updatedAt=new Date(1569294489023),t.type=r,t.permalink="/posts/20180911-redux-saga.html",t.assets={},t.attributes=t,t.prevPost={title:"webpack自定义配置",permalink:"/posts/20180825-webpack自定义配置.html"},t.nextPost={title:"封装",permalink:"/posts/20180917-封装.html"},t),o=e.options.beforeCreate||[];e.options.beforeCreate=[function(){this.$page=v}].concat(o);["layout","transition"].forEach((function(t){var a=e.options.PageComponent;a&&(e.options[t]=a[t]),void 0===e.options[t]&&(e.options[t]=v[t])})),e.options.name="page-wrapper-"+v.slug.replace(/[^0-9a-z\-]/i,"-")},v=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("layout-manager",[a("h2",{attrs:{id:"概述"}},[e._v("概述")]),e._v(" "),a("p",[e._v("redux-saga是一个用于管理redux应用异步操作的中间件，redux-saga通过创建sagas将所有异步操作逻辑收集在一个地方集中处理，可以用来代替redux-thunk中间件")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("这意味着应用的逻辑会存在两个地方 (1) reducer负责处理action的stage更新 (2) sagas负责协调那些复杂或者异步的操作")])]),e._v(" "),a("li",[a("p",[e._v("sagas是通过generator函数来创建的")])]),e._v(" "),a("li",[a("p",[e._v("sagas可以被看作是在后台运行的进程。sagas监听发起的action，然后决定基于这个action来做什么 (比如：是发起一个异步请求，还是发起其他的action到store，还是调用其他的sagas 等 )")])]),e._v(" "),a("li",[a("p",[e._v("在redux-saga的世界里，所有的任务都通过用 yield Effects 来完成 ( effect可以看作是redux-saga的任务单元 )")])]),e._v(" "),a("li",[a("p",[e._v("Effects 都是简单的 javascript对象，包含了要被 saga middleware 执行的信息")])]),e._v(" "),a("li",[a("p",[e._v("redux-saga 为各项任务提供了各种 （ Effects创建器 )")])]),e._v(" "),a("li",[a("p",[e._v("因为使用了generator函数，redux-saga让你可以用 同步的方式来写异步代码")])]),e._v(" "),a("li",[a("p",[e._v("redux-saga启动的任务可以在任何时候通过手动来取消，也可以把任务和其他的Effects放到 race 方法里以自动取消")])]),e._v(" "),a("li",[a("p",[e._v("produce: 生产")])]),e._v(" "),a("li",[a("p",[e._v("flow: 流动，排出")])]),e._v(" "),a("li",[a("p",[e._v("整个流程：ui组件触发action创建函数 ---\x3e action创建函数返回一个action ------\x3e action被传入redux中间件(被 saga等中间件处理) ，产生新的action，传入reducer-------\x3e reducer把数据传给ui组件显示 -----\x3e mapStateToProps ------\x3e ui组件显示")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"名词解释"}},[e._v("名词解释")]),e._v(" "),a("h3",{attrs:{id:"effect"}},[e._v("Effect")]),e._v(" "),a("p",[e._v("一个effect就是一个纯文本javascript对象，包含一些将被saga middleware执行的指令。")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("如何创建 effect ? 使用redux-saga提供的 工厂函数 来创建effect")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("你可以使用 call(myfunc, 'arg1', 'arg2') 指示middleware调用 myfunc('arg1', 'arg2')")])]),e._v(" "),a("li",[a("p",[e._v("并将结果返回给 yield 了 effect 的那个 generator")])])])])]),e._v(" "),a("h3",{attrs:{id:"task"}},[e._v("Task")]),e._v(" "),a("p",[e._v("一个 task 就像是一个在后台运行的进程，在基于redux-saga的应用程序中，可以同时运行多个task")]),e._v(" "),a("ul",[a("li",[e._v("通过 fork 函数来创建 task")])]),e._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"js"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-js"}},[a("code",{pre:!0,attrs:{class:"language-js"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("saga")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("...")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" task "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("yield")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("otherSaga"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("...")]),e._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("...")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")])])])]),a("h3",{attrs:{id:"阻塞调用-和-非阻塞调用"}},[e._v("阻塞调用 和 非阻塞调用")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("阻塞调用 阻塞调用的意思是： saga 会在 yield 了 effect 后会等待其执行结果返回，结果返回后才恢复执行 generator 中的下一个指令")])]),e._v(" "),a("li",[a("p",[e._v("非阻塞调用 非阻塞调用的意思是： saga 会在 yield effect 之后立即恢复执行")])])]),e._v(" "),a("h3",{attrs:{id:"watcher-和-worker"}},[e._v("watcher 和 worker")]),e._v(" "),a("p",[e._v("指的是一种使用两个单独的saga来组织控制流的方式")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("watcher：监听发起的action 并在每次接收到action时 fork 一个 work")])]),e._v(" "),a("li",[a("p",[e._v("worker： 处理action，并结束它")])])]),e._v(" "),a("h3",{attrs:{id:"api"}},[e._v("api")]),e._v(" "),a("blockquote",[a("p",[e._v("createSagaMiddleware(...sagas)")])]),e._v(" "),a("p",[e._v("createSagaMiddleware的作用是创建一个redux中间件，并将sagas与Redux store建立链接")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("参数是一个数组，里面是generator函数列表")])]),e._v(" "),a("li",[a("p",[e._v("sagas: Array ---- ( generator函数列表 )")])])]),e._v(" "),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("middleware.run(saga, ...args)")])]),e._v(" "),a("p",[e._v("动态执行 saga。用于 applyMiddleware 阶段之后执行 Sagas。这个方法返回一个 Task 描述对象。")]),e._v(" "),a("ul",[a("li",[e._v("saga: Function: 一个 Generator 函数")]),e._v(" "),a("li",[e._v("args: Array: 提供给 saga 的参数 (除了 Store 的 getState 方法)")])]),e._v(" "),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("take(pattern)")])]),e._v(" "),a("p",[e._v("----- 暂停Generator，匹配的action被发起时，恢复执行")]),e._v(" "),a("p",[e._v("创建一条 Effect 描述信息，指示 middleware 等待 Store 上指定的 action。 Generator 会暂停，直到一个与 pattern 匹配的 action 被发起。 pattern的规则")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("pattern为空 或者 * ，将会匹配所有发起的action")])]),e._v(" "),a("li",[a("p",[e._v("pattern是一个函数，action 会在 pattern(action) 返回为 true 时被匹配 （例如，take(action => action.entities) 会匹配那些 entities 字段为真的 action）。")])]),e._v(" "),a("li",[a("p",[e._v("pattern是一个字符串，action 会在 action.type === pattern 时被匹配")])]),e._v(" "),a("li",[a("p",[e._v("pattern是一个数组，会针对数组所有项，匹配与 action.type 相等的 action （例如，take([INCREMENT, DECREMENT]) 会匹配 INCREMENT 或 DECREMENT 类型的 action）")])])]),e._v(" "),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("fork(fn, ...args)")])]),e._v(" "),a("p",[e._v("----- 无阻塞的执行fn，执行fn时，不会暂停Generator ----- yield fork(fn ...args)的结果是一个 Task 对象")]),e._v(" "),a("p",[e._v("task对象 ---------- 一个具备某些有用的方法和属性的对象")]),e._v(" "),a("p",[e._v("创建一条 Effect 描述信息，指示 middleware 以 无阻塞调用 方式执行 fn。")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("fn: Function - 一个 Generator 函数, 或者返回 Promise 的普通函数")])]),e._v(" "),a("li",[a("p",[e._v("args: Array - 一个数组，作为 fn 的参数")])]),e._v(" "),a("li",[a("p",[e._v("fork 类似于 call，可以用来调用普通函数和 Generator 函数。但 fork 的调用是无阻塞的，在等待 fn 返回结果时，middleware 不会暂停 Generator。 相反，一旦 fn 被调用，Generator 立即恢复执行。")])]),e._v(" "),a("li",[a("p",[e._v("fork 与 race 类似，是一个中心化的 Effect，管理 Sagas 间的并发。 yield fork(fn ...args) 的结果是一个 Task 对象 —— 一个具备某些有用的方法和属性的对象。")])]),e._v(" "),a("li",[a("p",[e._v("fork: 是分叉，岔路的意思 ( 并发 )")])])]),e._v(" "),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("join(task)")])]),e._v(" "),a("p",[e._v("----- 等待fork任务返回结果(task对象)")]),e._v(" "),a("p",[e._v("创建一条 Effect 描述信息，指示 middleware 等待之前的 fork 任务返回结果。")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("task: Task - 之前的 fork 指令返回的 Task 对象")])]),e._v(" "),a("li",[a("p",[e._v("yield fork(fn, ...args) 返回的是一个 task 对象")])])]),e._v(" "),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("cancel(task)")])]),e._v(" "),a("p",[e._v("创建一条 Effect 描述信息，指示 middleware 取消之前的 fork 任务。")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("task: Task - 之前的 fork 指令返回的 Task 对象")])]),e._v(" "),a("li",[a("p",[e._v("cancel 是一个无阻塞 Effect。也就是说，Generator 将在取消异常被抛出后立即恢复。")])])]),e._v(" "),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("select(selector, ...args)")])]),e._v(" "),a("p",[e._v("----- 得到 Store 中的 state 中的数据 创建一条 Effect 描述信息，指示 middleware 调用提供的选择器获取 Store state 上的数据（例如，返回 selector(getState(), ...args) 的结果）。")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("selector: Function - 一个 (state, ...args) => args 函数. 通过当前 state 和一些可选参数，返回当前 Store state 上的部分数据。")])]),e._v(" "),a("li",[a("p",[e._v("args: Array - 可选参数，传递给选择器（附加在 getState 后）")])]),e._v(" "),a("li",[a("p",[e._v("如果 select 调用时参数为空( --- 即 yield select() --- )，那 effect 会取得整个的 state （和调用 getState() 的结果一样）")])])]),e._v(" "),a("blockquote",[a("p",[e._v("重要提醒：在发起 action 到 store 时，middleware 首先会转发 action 到 reducers 然后通知 Sagas。这意味着，当你查询 Store 的 state， 你获取的是 action 被处理之后的 state。")])]),e._v(" "),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("put(action)\n----- 发起一个 action 到 store 创建一条 Effect 描述信息，指示 middleware 发起一个 action 到 Store。")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("action: Object - 完整信息可查看 Redux 的 dispatch 文档")])]),e._v(" "),a("li",[a("p",[e._v("put 是异步的，不会立即发生")])])]),e._v(" "),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("call(fn, ...args) 阻塞执行，call()执行完，才会往下执行")])]),e._v(" "),a("p",[e._v("----- 执行 fn(...args) ----- 对比 fork(fn, ...args) 无阻塞执行 创建一条 Effect 描述信息，指示 middleware 调用 fn 函数并以 args 为参数。")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("fn: Function - 一个 Generator 函数, 或者返回 Promise 的普通函数")])]),e._v(" "),a("li",[a("p",[e._v("args: Array - 一个数组，作为 fn 的参数")])]),e._v(" "),a("li",[a("p",[e._v("fn 既可以是一个普通函数，也可以是一个 Generator 函数")])])]),e._v(" "),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("race(effects)")])]),e._v(" "),a("p",[e._v("effects: Object : 一个{label: effect, ...}形式的字典对象")]),e._v(" "),a("p",[e._v("同时执行多个任务")]),e._v(" "),a("p",[e._v("当我们需要 yield 一个包含 effects 的数组， generator 会被阻塞直到所有的 effects 都执行完毕，或者当一个 effect 被拒绝 （就像 Promise.all 的行为）时，才会恢复执行Generator函数 ( yield后面的语句 )。")])])}),[],!1,null,null,null);"function"==typeof s&&s(v);t.default=v.exports}}]);