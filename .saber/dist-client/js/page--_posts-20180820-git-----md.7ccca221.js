(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{72:function(s,t,a){"use strict";a.r(t);var e=a(0),r=function(s){var t,a,e,r,l,n,p,i,g,o=(e="post",r="恢复暂存区",l="历史记录",n="修复错误提交",p="挑拣提交（cherry-pick）",i="要看在某个时间段内的commit",g="把当前代码提交到另一个远程git仓库",(t={}).internal=a=void 0,t.contentType="markdown",t.slug="20180820-git一些命令",t.content=a,t.title="git的一些命令",t.layout=e,t.markdownHeadings=[{text:"Git diff",slug:"git-diff",level:2},{text:r,slug:r,level:2},{text:"Git reset",slug:"git-reset",level:2},{text:"Git stash",slug:"git-stash",level:2},{text:l,slug:l,level:2},{text:n,slug:n,level:2},{text:p,slug:p,level:2},{text:"将log 输出成工整好看的形式",slug:"将log-输出成工整好看的形式",level:2},{text:i,slug:i,level:2},{text:g,slug:g,level:2}],t.excerpt="<p>通常情况下，我们会在自己的独立分支中完成需求开发，此时就会有需求将自己的分支和其他分支进行对比。这个功能可以通过</p>\n",t.createdAt=new Date(15347232e5),t.updatedAt=new Date(1569161446350),t.type=e,t.permalink="/posts/20180820-git一些命令.html",t.assets={},t.attributes=t,t.prevPost={title:"AngularJS复杂业务系统的代码架构探索",permalink:"/posts/20180819-AngularJS复杂业务系统的代码架构探索.html"},t.nextPost={title:"Gulp的Stream",permalink:"/posts/20180821-Gulp的Stream.html"},t),c=s.options.beforeCreate||[];s.options.beforeCreate=[function(){this.$page=o}].concat(c);["layout","transition"].forEach((function(t){var a=s.options.PageComponent;a&&(s.options[t]=a[t]),void 0===s.options[t]&&(s.options[t]=o[t])})),s.options.name="page-wrapper-"+o.slug.replace(/[^0-9a-z\-]/i,"-")},l=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("layout-manager",[a("h2",{attrs:{id:"git-diff"}},[s._v("Git diff")]),s._v(" "),a("p",[s._v("通常情况下，我们会在自己的独立分支中完成需求开发，此时就会有需求将自己的分支和其他分支进行对比。这个功能可以通过")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" branch1 branch2\n// 命令来对比branch1和branch2分支的区别, 列出每一个有改动文件的具体改动.")])])]),a("p",[s._v("如果希望对比暂存区和当前的 HEAD，那么使用")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" --cached")])])]),a("p",[s._v("命令会非常方便。普通的 git diff 命令默认对比的是没有加到索引中的文件。")]),s._v(" "),a("h2",{attrs:{id:"恢复暂存区"}},[s._v("恢复暂存区")]),s._v(" "),a("p",[s._v("如果已经将一些文件添加到暂存区后又后悔了，Git 提供了多个命令来实现这个功能，具体需要根据当时情况而定。")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" path/to/file --cached")])])]),a("p",[s._v("命令将文件从暂存区索引中删除，但是仍然会将文件保留在工作目录。这比直接使用")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" -f")])])]),a("p",[s._v("命令直接完全删除文件会安全一点")]),s._v(" "),a("h2",{attrs:{id:"git-reset"}},[s._v("Git reset")]),s._v(" "),a("p",[s._v("如果希望恢复一些已经提交的改动，我们可以使用")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset")])])]),a("p",[s._v("命令。该命令有许多不同的行为，因此需要按照实际场景进行使用。")]),s._v(" "),a("p",[s._v("如果希望的是去除所有修改，包括索引中的内容和工作目录中的修改，那么可以使用")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard")])])]),a("p",[s._v("如果仅仅是希望重置索引，那么可以使用")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --mixed")])])]),a("p",[s._v("命令，这也是 git reset 命令的默认行为。混合的重置会保留当前工作目录中的改动。最后，如果仅仅希望修改分支的 HEAD，可以通过")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --soft")])])]),a("p",[s._v("实现")]),s._v(" "),a("p",[s._v("当运行 git reset 命令的时候，我们可以指定多个目标文件作为参数传入。当然可以通过")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard COMMIT_ID")])])]),a("p",[s._v("恢复到指定的提交版本。")]),s._v(" "),a("h2",{attrs:{id:"git-stash"}},[s._v("Git stash")]),s._v(" "),a("p",[s._v("大家应该对 git stash 命令并不陌生，它可以通过 git stash pop 命令方便的将之前的改动恢复回来。然而，如果工作目录中有未追踪的文件，默认情况下是不会将其存入临时储藏区的。为了能够临时保存未追踪的文件，可以使用")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" stash --include-untracked")])])]),a("p",[s._v("命令。另外一个非常有用的命令是")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" stash list")])])]),a("p",[s._v("它能列出临时储藏区中的内容。")]),s._v(" "),a("h2",{attrs:{id:"历史记录"}},[s._v("历史记录")]),s._v(" "),a("p",[s._v("Git 自带了非常强大的工具来查看项目以及特定文件的变更情况。我个人非常喜欢用其中的一个命令：")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log --graph --decorate --oneline")])])]),a("p",[s._v("用以展示经过修饰的提交历史。这个命令非常冗长，因此我建议可以为它创建一个别名（这可能是所有技巧中最有用的，因为许多命令都比较难记）。git log 命令可以显示 HEAD、所有提交的 ID 以及分支信息。有了这些信息之后，我们可以使用")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" show COMMIT_ID/HEAD/BRANCH")])])]),a("p",[s._v("命令来显示更详细的信息。")]),s._v(" "),a("p",[s._v("有的时候我们需要了解谁对一个文件做了哪些改动，这正是")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" blame path/to/file")])])]),a("p",[s._v("命令所提供的功能。")]),s._v(" "),a("p",[s._v("之前提到过 git diff 命令，它也是一个查看历史的工具。例如，如果需要对比当前 HEAD 和前两个提交，可以使用")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v(" HEAD HEAD~2")])])]),a("p",[s._v("为了能够展示每个提交中的更详细的更新信息，可以使用")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log --patch")])])]),a("p",[s._v("命令。如果只想要看包含关键字“apple”的提交，使用")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log --grep apples --oneline")])])]),a("p",[s._v("命令。")]),s._v(" "),a("p",[s._v("需要查看历史提交记录中两个点之间的提交历史，我们可以用")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log HEAD~5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("HEAD^ --oneline")])])]),a("p",[s._v("命令，对于分支可以使用")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log branch_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("master --oneline")])])]),a("p",[s._v("显示 master 分支的文件的改动")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log master --name-only --oneline")])])]),a("h2",{attrs:{id:"修复错误提交"}},[s._v("修复错误提交")]),s._v(" "),a("p",[s._v("注意：以下一些命令会修改提交历史，使用前请确保了解后再执行。 当提交出错时，我们可能会希望能够修改提交历史。我不建议修改已经推送到远程仓库的提交历史（即使 git 允许这样做），但是对于本地仓库的提交历史，我个人认为还是可以修改的。通过")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit --amend")])])]),a("p",[s._v("命令可以删除前一次提交，并创建一个新的提交记录以替代之前的提交。")]),s._v(" "),a("p",[s._v("另一个我最喜欢的 git 使用技巧是交互式变基 (rebase）。它可以用来编辑提交信息，或者将多个提交压缩成一个提交，这也是我最喜欢的一个功能。为了在远程仓库 origin 的 master 分支之后的所有提交上执行交互式变基，可以使用")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase -i origin/master")])])]),a("p",[s._v("该命令会显示提交列表和可执行操作的详细描述。例如以下操作将会把多个提交压缩成一个：")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" pick 80f2a48 Add feature X\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" squash 2c74ea2 Add junit tests "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" feature X\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" squash 4k81nm5 Bugfix "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" feature X")])])]),a("p",[s._v("最终的结果会是生成一个提交消息为“Add feature X”的提交。")]),s._v(" "),a("p",[s._v("如果需要恢复一个有问题的提交，我们可以使用")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" revert COMMIT_ID")])])]),a("p",[s._v("该命令会创建一个新的提交，让当前项目状态恢复到指定提交之前。")]),s._v(" "),a("p",[s._v("如果我们在修复问题时出现了误操作，例如不小心删除了不应该删除的文件。我们还是可以从版本库中恢复回来，因为 git 保存了所有修改的版本，包括被移除的提交。git reflog 命令就是用来实现这个功能的。")]),s._v(" "),a("h2",{attrs:{id:"挑拣提交（cherry-pick）"}},[s._v("挑拣提交（cherry-pick）")]),s._v(" "),a("p",[s._v("假设我们和同事在各自单独的分支上进行开发，同事有一个重要的提交我们也想应用到自己的分支上来，但是不需要对方分支的其他提交。这时我们可以使用")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" cherry-pick COMMIT_ID")])])]),a("h2",{attrs:{id:"将log-输出成工整好看的形式"}},[s._v("将log 输出成工整好看的形式")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("format:"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%C(auto)%h %ad | %C(auto)%s%d  %Cblue(%an)"')]),s._v(" --date"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("short")])])]),a("h2",{attrs:{id:"要看在某个时间段内的commit"}},[s._v("要看在某个时间段内的commit")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" log --since"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2018-10-01"')]),s._v(" --before"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2018-10-02"')])])])]),a("h2",{attrs:{id:"把当前代码提交到另一个远程git仓库"}},[s._v("把当前代码提交到另一个远程git仓库")]),s._v(" "),a("p",[s._v("假如仓库repo_a当前位于branch_a，要求将branch_a的整个数据（包括提交历史）全部提取出来，并建立一个新的仓库repo_b。这里假设仓库repo_b已经被建立。 git remote add基本语法如下。name和url是必须的。")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、 将仓库repo_b的URL添加到工作仓库的remote。\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-t "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-m "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("master"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("--"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("no-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("tags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("--mirror"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("fetch"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("push"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("url"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" wei-ui-repo http://git.meicloud.com/mjb-product/web-ui/jiebao-plus\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("origin_repo_b:自己起的名字，只要不与现有的remote名重复即可"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("git@server_ip:/path/repo_b.git:repo_b的远程路径"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、将代码推送到远程repo_b。\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push origin_repo_b branch_a\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("origin_repo_b:远程仓库repo_b的名字"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("branch_a:仓库repo_a的的branch_a分支"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、克隆仓库repo_b，检查是否push成功。\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone git@server_ip:/path/repo_b.")])])]),a("p",[s._v("以下命令用于将本地的分支推向远端的分支:")]),s._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push origin_repo_b local_branch:origin_branch")])])])])}),[],!1,null,null,null);"function"==typeof r&&r(l);t.default=l.exports}}]);