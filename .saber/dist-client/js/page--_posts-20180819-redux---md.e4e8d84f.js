(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{80:function(t,s,a){"use strict";a.r(s);var e=a(0),n=function(t){var s,a,e,n,r=(e="post",n="三大原则",(s={}).internal=a=void 0,s.contentType="markdown",s.slug="20180819-redux入门",s.content=a,s.title="redux入门",s.layout=e,s.markdownHeadings=[{text:"Redux是什么",slug:"redux是什么",level:2},{text:"Redux的优点",slug:"redux的优点",level:2},{text:"Redux的核心概念",slug:"redux的核心概念",level:2},{text:"1. action",slug:"1--action",level:3},{text:"2. reducers",slug:"2--reducers",level:3},{text:"3. store",slug:"3--store",level:3},{text:n,slug:n,level:2}],s.excerpt="<p>Redux对于JavaScript应用而言是一个可预测状态的容器。换言之，它是一个应用数据流框架，而不是传统的像underscore.js或者AngularJs那样的库或者框架。</p>\n",s.createdAt=new Date(15346368e5),s.updatedAt=new Date(1568972458654),s.type=e,s.permalink="/posts/20180819-redux入门.html",s.assets={},s.attributes=s,s.prevPost={title:"Netlify",permalink:"/posts/20180815-netlify简介.html"},s.nextPost={title:"AngularJS复杂业务系统的代码架构探索",permalink:"/posts/20180819-AngularJS复杂业务系统的代码架构探索.html"},s),p=t.options.beforeCreate||[];t.options.beforeCreate=[function(){this.$page=r}].concat(p);["layout","transition"].forEach((function(s){var a=t.options.PageComponent;a&&(t.options[s]=a[s]),void 0===t.options[s]&&(t.options[s]=r[s])})),t.options.name="page-wrapper-"+r.slug.replace(/[^0-9a-z\-]/i,"-")},r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("layout-manager",[a("h2",{attrs:{id:"redux是什么"}},[t._v("Redux是什么")]),t._v(" "),a("p",[t._v("Redux对于JavaScript应用而言是一个可预测状态的容器。换言之，它是一个应用数据流框架，而不是传统的像underscore.js或者AngularJs那样的库或者框架。")]),t._v(" "),a("p",[t._v("Redux最主要是用作应用状态的管理。简言之，Redux用一个单独的常量状态树（对象）保存这一整个应用的状态，这个对象不能直接被改变。当一些数据变化了，一个新的对象就会被创建（使用actions和reducers）。")]),t._v(" "),a("p",[t._v("应用中所有的 state 都以一个对象树的形式储存在一个单一的 store 中。 惟一改变 state 的办法是触发 action，一个描述发生什么的对象。 为了描述 action 如何改变 state 树，你需要编写 reducers (单向数据流)。")]),t._v(" "),a("h2",{attrs:{id:"redux的优点"}},[t._v("Redux的优点")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("预测 始终有一个准确的数据源，就是store, 对于如何将actions以及应用的其他部分和当前的状态同步可以做到绝不混乱。")])]),t._v(" "),a("li",[a("p",[t._v("维护 具备可预测结果的性质和严格的组织结构让代码更容易维护。")])]),t._v(" "),a("li",[a("p",[t._v("组织 对代码应该如何组织更加严苛，这使代码更加一致，对团队协作更加容易。")])]),t._v(" "),a("li",[a("p",[t._v("测试 编写可测试代码的首要准则就是编写可以仅做一件事并且独立的小函数。Redux的代码几乎全部都是这样的函数：短小、纯粹、分离")])]),t._v(" "),a("li",[a("p",[t._v("服务端渲染 可以带来更好的用户体验并且有助于搜索引擎优化，尤其是对于首次渲染。仅仅是把服务端创建的store传递给客户端就可以。")])]),t._v(" "),a("li",[a("p",[t._v("开发者工具 开发者可以实时跟踪在应用中正在发生的一切，从actions到状态的改变。")])]),t._v(" "),a("li",[a("p",[t._v("社区与生态圈 存在很多支持Redux的社区，使它能够吸引更多的人来使用。")])])]),t._v(" "),a("h2",{attrs:{id:"redux的核心概念"}},[t._v("Redux的核心概念")]),t._v(" "),a("h3",{attrs:{id:"1--action"}},[t._v("1. action")]),t._v(" "),a("p",[t._v("简单地，Actions就是事件。Actions传递来自这个应用（用户接口，内部事件比如API调用和表单提交）的数据给store。store只获取来自Actions的信息。内部Actions就是简单的具有一个type属性（通常是常量）的JavaScript对象，这个对象描述了action的类型以及传递给store的负载信息。")]),t._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"json"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-json"}},[a("code",{pre:!0,attrs:{class:"language-json"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" LOGIN_FORM_SUBMIT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  payload"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("username"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 'alex'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" password"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" '"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123456")]),t._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])]),a("p",[t._v("Actions通过action生成器创建，它们仅仅是是返回action的函数。")]),t._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"js"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-js"}},[a("code",{pre:!0,attrs:{class:"language-js"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("authUser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("form")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LOGIN_FORM_SUBMIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    payload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" form \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])]),a("p",[t._v("要在应用中的任何地方调用actions很容易，使用dispatch方法。")]),t._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"js"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-js"}},[a("code",{pre:!0,attrs:{class:"language-js"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("authUser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("form"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])]),a("h3",{attrs:{id:"2--reducers"}},[t._v("2. reducers")]),t._v(" "),a("p",[t._v("在函数式JavaScript中reducer基于数组reduce方法，接收一个回调（reducer）让你从多个值中获得单个值，整数和，或者一个一系列值的累积。在Redux中，reducer就是获得这个应用的当前状态和事件然后返回一个新状态的函数。理解reducer是怎样工作的至关重要，因为它们完成大部分工作。这是一个非常简单的reducer，通过获取当前state和一个action作为参数，再返回下一个state：")]),t._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"js"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-js"}},[a("code",{pre:!0,attrs:{class:"language-js"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleAuth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" _"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    auth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("payload  \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])]),a("p",[t._v("对于更多复杂的项目，使用Redux提供的combineReducers()实例是必要的（推荐）。它把在这个应用中所有的reducer结合在一起成为单个索引reducer。每一个reducer负责它自己那部分应用的状态，这个状态参数和其他reducer的不一样。combineReducers()实例使文件结构更容易维护。")]),t._v(" "),a("p",[t._v("如果一个对象（state）只改变一些值，Redux就创建一个新的对象，那些没有改变的值将会指向旧的对象而且新的值将会被创建。这对性能是极好的。为了让它更有效率你可以添加 Immutable.js")]),t._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"js"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-js"}},[a("code",{pre:!0,attrs:{class:"language-js"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rootReducer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("combineReducers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  handleAuth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" handleAuth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  editProfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" editProfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  changePassword"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" changePassword\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])]),a("h3",{attrs:{id:"3--store"}},[t._v("3. store")]),t._v(" "),a("p",[t._v("Store对象保存应用的状态并提供一些帮助方法来存取状态，分发状态以及注册监听。全部state由一个store来表示。任何action通过reducer返回一个新的状态对象。这就使得Redux非常简单以及可预测。")]),t._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"js"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-js"}},[a("code",{pre:!0,attrs:{class:"language-js"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createStore "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'redux'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" store "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createStore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rootReducer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的rootReducer就是上面创建的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" authInfo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'alex'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" password"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123456'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("authUser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("authInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])])])]),a("h2",{attrs:{id:"三大原则"}},[t._v("三大原则")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("单一数据源")]),t._v(" "),a("ul",[a("li",[t._v("整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。")])])]),t._v(" "),a("li",[a("p",[t._v("State是只读的")]),t._v(" "),a("ul",[a("li",[t._v("唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。")])])]),t._v(" "),a("li",[a("p",[t._v("使用纯函数来进行修改state")]),t._v(" "),a("ul",[a("li",[t._v("为了描述 action 如何改变 state tree ，你需要编写 reducers。")])])]),t._v(" "),a("li",[a("p",[t._v("view ---\x3e action ---\x3e reducer ---\x3e store(state) ---\x3e view")])])])])}),[],!1,null,null,null);"function"==typeof n&&n(r);s.default=r.exports}}]);