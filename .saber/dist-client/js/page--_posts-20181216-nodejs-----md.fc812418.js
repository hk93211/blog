(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{88:function(t,s,a){"use strict";a.r(s);var e=a(0),n=function(t){var s,a,e,n,p,r=(e="post",n="process",p="path",(s={}).internal=a=void 0,s.contentType="markdown",s.slug="20181216-nodejs一些学习",s.content=a,s.title="nodejs一些学习",s.layout=e,s.markdownHeadings=[{text:n,slug:n,level:2},{text:p,slug:p,level:2}],s.createdAt=new Date(15449184e5),s.updatedAt=new Date(1569296436327),s.type=e,s.permalink="/posts/20181216-nodejs一些学习.html",s.assets={},s.attributes=s,s.prevPost={title:"this",permalink:"/posts/20181128-this.html"},s.nextPost={title:"javascript回流和重绘",permalink:"/posts/20181217-javascript回流和重绘.html"},s),o=t.options.beforeCreate||[];t.options.beforeCreate=[function(){this.$page=r}].concat(o);["layout","transition"].forEach((function(s){var a=t.options.PageComponent;a&&(t.options[s]=a[s]),void 0===t.options[s]&&(t.options[s]=r[s])})),t.options.name="page-wrapper-"+r.slug.replace(/[^0-9a-z\-]/i,"-")},p=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("layout-manager",[a("h2",{attrs:{id:"process"}},[t._v("process")]),t._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[t._v("process.cwd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 返回进程的当前工作目录\nprocess.env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 返回用户的环境信息\nprocess.execPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 返回启动进程的可执行文件的绝对路径"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node的路径"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nprocess.argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 返回进程启动时的命令行参数。 第一个元素是 process.execPath。 使用 process.argv0 可以获取 argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 原始的值。 第二个元素是当前执行的 JavaScript 文件的路径。 剩余的元素都是额外的命令行参数。")])])]),a("h2",{attrs:{id:"path"}},[t._v("path")]),t._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"shell"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-shell"}},[a("code",{pre:!0,attrs:{class:"language-shell"}},[t._v("path.resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 将路径或路径片段处理成绝对路径, 从右到左依次处理，直到构造出绝对路径, 其处理方式类似于对这些路径逐一进行cd操作，与cd操作不同的是，这引起路径可以是文件，并且可不必实际存在（resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("方法不会利用底层的文件系统判断路径是否存在，而只是进行路径字符串操作）\npath.join"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 连接任意多个路径字符串。要连接的多个路径可做为参数传入\n\n对比__dirname:\n__dirname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 是被执行的js 文件的地址")])])])])}),[],!1,null,null,null);"function"==typeof n&&n(p);s.default=p.exports}}]);